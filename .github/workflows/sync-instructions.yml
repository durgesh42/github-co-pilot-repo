# .github/workflows/sync-instructions-simple.yml
name: Sync Copilot Instructions (Simplified)

on:
  push:
    branches: [main]
    paths: ['github-co-pilot-repo1/**', 'github-co-pilot-repo2/**']
  workflow_dispatch:

env:
  PROJECT_NUMBER: 1
  GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}

jobs:
  sync:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: 
          - { name: 'repo1', source_folder: 'github-co-pilot-repo1', assignee: 'durgesh42' }
          - { name: 'repo2', source_folder: 'github-co-pilot-repo2', assignee: 'durgesh42' }
    
    steps:
      # Step 1: Get the config repository
      - name: Checkout config repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SYNC_TOKEN }}
          path: config-repo
          fetch-depth: 2

      # Step 2: Check if this specific repo folder was changed (prevents duplicate PRs)
      - name: Check if this repo was changed
        id: check_changes_for_repo
        run: |
          # Use GitHub API to get changed files (more reliable than git diff)
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/files --jq '.[].filename' | tr '\n' ' ')
            echo "Changed files: $CHANGED_FILES"
          else
            # Manual trigger - process this repo
            CHANGED_FILES="${{ matrix.repo.source_folder }}/"
          fi
          
          # Check if this repo's folder was changed
          if echo "$CHANGED_FILES" | grep -q "${{ matrix.repo.source_folder }}/"; then
            echo "repo_changed=true" >> $GITHUB_OUTPUT
            echo "✅ ${{ matrix.repo.source_folder }} has changes"
          else
            echo "repo_changed=false" >> $GITHUB_OUTPUT
            echo "⏭️ ${{ matrix.repo.source_folder }} - no changes, skipping"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}

      # Step 3: Verify source folder exists
      - name: Check if source folder exists
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true'
        id: check_folder
        run: |
          if [ -d "config-repo/${{ matrix.repo.source_folder }}" ]; then
            echo "folder_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Found: ${{ matrix.repo.source_folder }}"
          else
            echo "folder_exists=false" >> $GITHUB_OUTPUT
            echo "❌ Missing: ${{ matrix.repo.source_folder }}"
          fi

      # Step 4: Get the target repository
      - name: Checkout target repo
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ matrix.repo.name }}
          token: ${{ secrets.SYNC_TOKEN }}
          path: target-repo

      # Step 5: Copy configuration files
      - name: Copy files to target repo
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true'
        run: |
          mkdir -p target-repo/.github
          cp -r config-repo/${{ matrix.repo.source_folder }}/* target-repo/.github/ 2>/dev/null || true
          cp -r config-repo/${{ matrix.repo.source_folder }}/.* target-repo/.github/ 2>/dev/null || true
          echo "📄 Files copied to ${{ matrix.repo.name }}"

      # Step 6: Check if there are actual changes to commit
      - name: Check for changes
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true'
        id: check_changes
        run: |
          cd target-repo
          git add .
          if git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "⚡ No changes in ${{ matrix.repo.name }}"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "🔄 Changes detected in ${{ matrix.repo.name }}"
          fi

      # Step 7: Check if PR already exists (prevents duplicates)
      - name: Check for existing PR
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true'
        id: check_existing_pr
        run: |
          EXISTING_PR=$(gh pr list --repo "${{ github.repository_owner }}/${{ matrix.repo.name }}" --head "sync-github-config-*" --state open --json number --jq '.[0].number // empty')
          
          if [ -n "$EXISTING_PR" ]; then
            echo "existing_pr=true" >> $GITHUB_OUTPUT
            echo "existing_pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "⚠️ Found existing PR #$EXISTING_PR"
          else
            echo "existing_pr=false" >> $GITHUB_OUTPUT
            echo "✅ No existing PR found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}

      # Step 8a: Create new PR (if none exists)
      - name: Create new PR
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true' && steps.check_existing_pr.outputs.existing_pr == 'false'
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.SYNC_TOKEN }}
          path: target-repo
          title: '🤖 Sync .github Configuration - ${{ matrix.repo.name }}'
          assignees: ${{ matrix.repo.assignee }}
          labels: 'copilot-config,automated'
          body: |
            ## 🚀 Automated Configuration Sync
            
            **Repository:** ${{ matrix.repo.name }}  
            **Assigned to:** @${{ matrix.repo.assignee }}
            
            This PR syncs configuration from the central repository.
            
            **Source:** ${{ github.repository }}
            **Folder:** ${{ matrix.repo.source_folder }}/
            
            Please review and merge to keep configurations up to date.
          branch: sync-github-config-${{ github.run_number }}
          delete-branch: true

      # Step 8b: Update existing PR (if one exists)
      - name: Update existing PR
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true' && steps.check_existing_pr.outputs.existing_pr == 'true'
        run: |
          cd target-repo
          
          # Get existing branch and update it
          EXISTING_BRANCH=$(gh pr view ${{ steps.check_existing_pr.outputs.existing_pr_number }} --repo "${{ github.repository_owner }}/${{ matrix.repo.name }}" --json headRefName --jq '.headRefName')
          git fetch origin "$EXISTING_BRANCH"
          git checkout "$EXISTING_BRANCH"
          git add .
          git commit -m "Update configuration ($(date))" || echo "No new changes"
          git push origin "$EXISTING_BRANCH"
          
          # Add comment to PR
          gh pr comment ${{ steps.check_existing_pr.outputs.existing_pr_number }} --repo "${{ github.repository_owner }}/${{ matrix.repo.name }}" --body "🔄 Configuration updated from central repository"
          
          echo "✅ Updated existing PR #${{ steps.check_existing_pr.outputs.existing_pr_number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}

      # Step 9: Add new PR to project board
      - name: Add to project board
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true' && steps.create_pr.outputs.pull-request-url
        run: |
          # Get project ID
          PROJECT_ID=$(gh api graphql -f query='query($user: String!, $number: Int!) { user(login: $user) { projectV2(number: $number) { id } } }' -f user="${{ github.repository_owner }}" -F number=${{ env.PROJECT_NUMBER }} --jq '.data.user.projectV2.id')
          
          # Get PR ID and add to project
          PR_ID=$(gh api "repos/${{ github.repository_owner }}/${{ matrix.repo.name }}/pulls/${{ steps.create_pr.outputs.pull-request-number }}" --jq '.node_id')
          gh api graphql -f query='mutation($project: ID!, $pr: ID!) { addProjectV2ItemById(input: {projectId: $project, contentId: $pr}) { item { id } } }' -f project="$PROJECT_ID" -f pr="$PR_ID"
          
          echo "✅ Added PR to project board"
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}

      # Step 10: Summary
      - name: Summary
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          if [ "${{ steps.check_existing_pr.outputs.existing_pr }}" = "true" ]; then
            echo "📋 Updated existing PR for ${{ matrix.repo.name }}"
          else
            echo "📋 Created new PR for ${{ matrix.repo.name }}"
          fi
          echo "👤 Assigned to: ${{ matrix.repo.assignee }}"