# .github/workflows/sync-instructions-with-project.yml
name: Sync Copilot Instructions with Project Tracking

on:
  push:
    branches: [main]
    paths: ['github-co-pilot-repo1/**', 'github-co-pilot-repo2/**']
  workflow_dispatch:

env:
  PROJECT_NUMBER: 1  # Replace with your actual project number
  GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}

jobs:
  sync:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: 
          - { name: 'repo1', source_folder: 'github-co-pilot-repo1', assignee: 'john-doe' }
          - { name: 'repo2', source_folder: 'github-co-pilot-repo2', assignee: 'jane-smith' }
    
    steps:
      - name: Checkout config repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SYNC_TOKEN }}
          path: config-repo
          fetch-depth: 1

      - name: Check if this repo's folder was actually changed
        id: check_changes_for_repo
        run: |
          # Get the list of changed files in this push
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }})
          else
            # For manual trigger, assume all repos need update
            CHANGED_FILES="github-co-pilot-repo1/ github-co-pilot-repo2/"
          fi
          
          echo "Changed files: $CHANGED_FILES"
          
          # Check if this specific repo's folder was changed
          if echo "$CHANGED_FILES" | grep -q "${{ matrix.repo.source_folder }}/"; then
            echo "repo_changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ ${{ matrix.repo.source_folder }} has changes - will process"
          else
            echo "repo_changed=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è ${{ matrix.repo.source_folder }} has no changes - skipping"
          fi

      - name: Check if source folder exists
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true'
        id: check_folder
        run: |
          if [ -d "config-repo/${{ matrix.repo.source_folder }}" ]; then
            echo "folder_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Found source folder: ${{ matrix.repo.source_folder }}"
            echo "üìÇ Contents:"
            ls -la "config-repo/${{ matrix.repo.source_folder }}/"
          else
            echo "folder_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå No source folder found: ${{ matrix.repo.source_folder }}"
          fi

      - name: Checkout target repo
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true'
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ matrix.repo.name }}
          token: ${{ secrets.SYNC_TOKEN }}
          path: target-repo

      - name: Create .github directory
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true'
        run: |
          mkdir -p target-repo/.github
          echo "üìÅ Created .github directory in ${{ matrix.repo.name }}"

      - name: Copy all files from source folder to .github
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true'
        run: |
          echo "üîÑ Copying all contents from ${{ matrix.repo.source_folder }} to ${{ matrix.repo.name }}/.github/"
          
          # Copy all files and folders from source to target .github directory
          cp -r config-repo/${{ matrix.repo.source_folder }}/* target-repo/.github/ 2>/dev/null || true
          
          # Also copy hidden files (like .gitignore, etc.)
          cp -r config-repo/${{ matrix.repo.source_folder }}/.* target-repo/.github/ 2>/dev/null || true
          
          echo "üìÑ Files copied to ${{ matrix.repo.name }}:"
          ls -la target-repo/.github/

      - name: Check for changes
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true'
        id: check_changes
        run: |
          cd target-repo
          git add .
          if git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "‚ö° No changes detected in ${{ matrix.repo.name }}"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "üîÑ Changes detected in ${{ matrix.repo.name }}"
            echo "Changed files:"
            git diff --cached --name-only
          fi

      - name: Check for existing PRs
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true'
        id: check_existing_pr
        run: |
          # Check if there's already an open PR from our sync branch pattern
          EXISTING_PR=$(gh pr list \
            --repo "${{ github.repository_owner }}/${{ matrix.repo.name }}" \
            --head "sync-github-config-*" \
            --state open \
            --json number,headRefName \
            --jq '.[0].number // empty')
          
          if [ -n "$EXISTING_PR" ]; then
            echo "existing_pr=true" >> $GITHUB_OUTPUT
            echo "existing_pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Found existing PR #$EXISTING_PR for ${{ matrix.repo.name }}"
            echo "Skipping PR creation to avoid duplicates"
          else
            echo "existing_pr=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No existing PR found for ${{ matrix.repo.name }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}

      - name: Create Pull Request
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true' && steps.check_existing_pr.outputs.existing_pr == 'false'
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.SYNC_TOKEN }}
          path: target-repo
          commit-message: 'Sync .github configuration from github-co-pilot-repo'
          title: 'ü§ñ Sync .github Configuration - ${{ matrix.repo.name }}'
          assignees: ${{ matrix.repo.assignee }}
          labels: 'copilot-config,automated'
          body: |
            ## üöÄ Automated .github Configuration Sync
            
            **Repository:** ${{ matrix.repo.name }}  
            **Assigned to:** @${{ matrix.repo.assignee }}
            
            This PR syncs the complete `.github` directory configuration from the central `github-co-pilot-repo`.
            
            ### üìã Changes
            - Synced all files from `${{ matrix.repo.source_folder }}/` to `.github/`
            - Updated GitHub configuration, workflows, templates, and Copilot instructions
            
            ### üîó Source
            - Config repo: ${{ github.repository }}
            - Source folder: `${{ matrix.repo.source_folder }}/`
            - Commit: ${{ github.sha }}
            - Triggered by: ${{ github.event_name }}
            
            ### ‚ö†Ô∏è Action Required
            Please review and merge this PR to keep your repository configuration up to date.
            
            **‚úÖ Ready for review and merge**
          branch: sync-github-config-${{ github.run_number }}
          delete-branch: true

      - name: Update existing PR
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true' && steps.check_existing_pr.outputs.existing_pr == 'true'
        run: |
          echo "üîÑ Updating existing PR #${{ steps.check_existing_pr.outputs.existing_pr_number }} for ${{ matrix.repo.name }}"
          
          # Update the existing PR with new changes
          cd target-repo
          
          # Get the existing branch name
          EXISTING_BRANCH=$(gh pr view ${{ steps.check_existing_pr.outputs.existing_pr_number }} \
            --repo "${{ github.repository_owner }}/${{ matrix.repo.name }}" \
            --json headRefName \
            --jq '.headRefName')
          
          # Switch to existing branch and update it
          git fetch origin "$EXISTING_BRANCH"
          git checkout "$EXISTING_BRANCH"
          git add .
          git commit -m "Update .github configuration from github-co-pilot-repo ($(date))" || echo "No new changes to commit"
          git push origin "$EXISTING_BRANCH"
          
          # Add comment to existing PR
          gh pr comment ${{ steps.check_existing_pr.outputs.existing_pr_number }} \
            --repo "${{ github.repository_owner }}/${{ matrix.repo.name }}" \
            --body "üîÑ **Configuration Updated**
          
          New changes have been pushed to this PR from the central configuration repository.
          
          **Source:** ${{ github.repository }}
          **Commit:** ${{ github.sha }}
          **Updated:** $(date)
          
          Please review the latest changes."
          
          echo "‚úÖ Updated existing PR #${{ steps.check_existing_pr.outputs.existing_pr_number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}

      - name: Get Project ID
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true' && steps.create_pr.outputs.pull-request-url
        id: get_project
        run: |
          PROJECT_ID=$(gh api graphql -f query='
            query($user: String!, $number: Int!) {
              user(login: $user) {
                projectV2(number: $number) {
                  id
                }
              }
            }' -f user="${{ github.repository_owner }}" -F number=${{ env.PROJECT_NUMBER }} --jq '.data.user.projectV2.id')
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}

      - name: Add PR to Project Board with Status
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true' && steps.create_pr.outputs.pull-request-url
        run: |
          # Get the PR node ID
          PR_ID=$(gh api "repos/${{ github.repository_owner }}/${{ matrix.repo.name }}/pulls/${{ steps.create_pr.outputs.pull-request-number }}" --jq '.node_id')
          
          # Add PR to project and get item ID
          ITEM_ID=$(gh api graphql -f query='
            mutation($project: ID!, $pr: ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $pr}) {
                item {
                  id
                }
              }
            }' -f project="${{ steps.get_project.outputs.project_id }}" -f pr="$PR_ID" --jq '.data.addProjectV2ItemById.item.id')
          
          echo "‚úÖ Added PR #${{ steps.create_pr.outputs.pull-request-number }} to project board"
          
          # Get the Status field ID and "In review" option ID
          FIELD_DATA=$(gh api graphql -f query='
            query($project: ID!) {
              node(id: $project) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f project="${{ steps.get_project.outputs.project_id }}")
          
          STATUS_FIELD_ID=$(echo "$FIELD_DATA" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .id')
          IN_REVIEW_OPTION_ID=$(echo "$FIELD_DATA" | jq -r '.data.node.fields.nodes[] | select(.name == "Status") | .options[] | select(.name == "In review") | .id')
          
          # Set status to "In review" if both field and option exist
          if [ "$STATUS_FIELD_ID" != "null" ] && [ "$IN_REVIEW_OPTION_ID" != "null" ]; then
            gh api graphql -f query='
              mutation($project: ID!, $item: ID!, $field: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $field
                  value: { singleSelectOptionId: $value }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }' -f project="${{ steps.get_project.outputs.project_id }}" -f item="$ITEM_ID" -f field="$STATUS_FIELD_ID" -f value="$IN_REVIEW_OPTION_ID"
            
            echo "‚úÖ Set status to 'In review' for PR #${{ steps.create_pr.outputs.pull-request-number }}"
          else
            echo "‚ö†Ô∏è Could not find Status field or 'In review' option in project"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.SYNC_TOKEN }}

      - name: Summary
        if: steps.check_changes_for_repo.outputs.repo_changed == 'true' && steps.check_folder.outputs.folder_exists == 'true' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          if [ "${{ steps.check_existing_pr.outputs.existing_pr }}" = "true" ]; then
            echo "üìã Updated existing PR for ${{ matrix.repo.name }}"
            echo "üîó PR URL: https://github.com/${{ github.repository_owner }}/${{ matrix.repo.name }}/pull/${{ steps.check_existing_pr.outputs.existing_pr_number }}"
          else
            echo "üìã Created new PR for ${{ matrix.repo.name }}"
            echo "üîó PR URL: ${{ steps.create_pr.outputs.pull-request-url }}"
            echo "üìä Added to project board with 'In review' status"
          fi
          echo "üë§ Assigned to: ${{ matrix.repo.assignee }}"

  project_summary:
    needs: sync
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create Project Summary
        run: |
          echo "üìä Copilot Configuration Sync Summary"
          echo "Workflow completed for all repositories"
          echo "Check the project board for PR status tracking"